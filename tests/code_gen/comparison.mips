.data

Object : .word, Object_abort, Object_copy, Object_type_name
Object_cname : .asciiz, "Object"
IO : .word, Object_abort, IO_copy, IO_type_name, IO_out_string, IO_out_int, IO_in_string, IO_in_int
IO_cname : .asciiz, "IO"
String : .word, Object_abort, String_copy, String_type_name, String_length, String_concat, String_substr
String_cname : .asciiz, "String"
Int : .word, Object_abort, Int_copy, Int_type_name
Int_cname : .asciiz, "Int"
Bool : .word, Object_abort, Bool_copy, Bool_type_name
Bool_cname : .asciiz, "Bool"
Main : .word, Object_abort, Main_copy, Main_type_name, IO_out_string, IO_out_int, IO_in_string, IO_in_int, Main_main, Main_constructor
Main_cname : .asciiz, "Main"
void : .word, -1
empty_string : .asciiz, ""
input_str_buffer : .space, 1024
abort_signal : .asciiz, "Program execution aborted"
case_missmatch : .asciiz, "Execution of a case statement without a matching branch"
case_on_void : .asciiz, "Case on void"
dispatch_on_void : .asciiz, "Dispatch on void"
division_by_zero : .asciiz, "Division by zero"
substr_out_of_range : .asciiz, "Substring out of range"
heap_overflow : .asciiz, "Heap overflow"
type_name_Object : .asciiz, "Object"
type_name_IO : .asciiz, "IO"
type_name_String : .asciiz, "String"
type_name_Int : .asciiz, "Int"
type_name_Bool : .asciiz, "Bool"
type_name_Main : .asciiz, "Main"
string_1 : .asciiz, "a>b"
string_2 : .asciiz, "a<=b"

.text
.globl main

length:
    li $t1, 0
    length_loop:
    lb $t0, 0($a0)
    beq $zero, $t0, length_end
    add $t1, $t1, 1
    add $a0, $a0, 1
    j length_loop
    length_end:
    move $a0 $t1
    j $ra
copy:
    copy_loop:
    beq $zero, $a0, copy_end
    lb $t8, 0($t7)
    sb $t8, 0($t6)
    addi $t6, $t6, 1
    addi $t7, $t7, 1
    addi $a0, $a0, -1
    j copy_loop
    copy_end:
    j $ra
main:
    move $t0 $fp
    #New $fp
    move $fp $sp
    #Reserving space for locals
    addi $sp, $sp, 8
    #Pushing $ra
    sw $ra, 0($sp)
    addi $sp, $sp, 4
    #Saving $fp
    sw $t0, 0($sp)
    addi $sp, $sp, 4
    #Executing instructions
    #Executing Static Call
    jal Main_constructor
    sw $a1, 0($fp)
    addi $sp, $sp, 0
    #Receiving Arg local_main_internal_0
    lw $t5, 0($fp)
    sw $t5, 0($sp)
    addi $sp, $sp, 4
    #Executing Static Call
    jal Main_main
    sw $a1, 4($fp)
    addi $sp, $sp, -4
    li $v0, 10
    syscall
Object_abort:
    move $t2 $fp
    #New $fp
    move $fp $sp
    #Reserving space for locals
    addi $sp, $sp, 0
    #Pushing $ra
    sw $ra, 0($sp)
    addi $sp, $sp, 4
    #Saving $fp
    sw $t2, 0($sp)
    addi $sp, $sp, 4
    #Executing instructions
    #Executing RuntimeError
    #Printing Abort Message
    la $a0, abort_signal
    li $v0, 4
    syscall
    #Aborting execution
    li $v0, 10
    syscall
Object_copy:
    move $t0 $fp
    #New $fp
    move $fp $sp
    #Reserving space for locals
    addi $sp, $sp, 4
    #Pushing $ra
    sw $ra, 0($sp)
    addi $sp, $sp, 4
    #Saving $fp
    sw $t0, 0($sp)
    addi $sp, $sp, 4
    #Executing instructions
    #Executing Allocate
    li $v0, 9
    li $a0, 4
    syscall
    sw $v0, 0($fp)
    la $t5, Object
    sw $t5, 0($v0)
    #Executing Return
    lw $a1, 0($fp)
    #Restoring saved $fp
    addi $sp, $sp, -4
    lw $fp, 0($sp)
    #Restoring saved $ra
    addi $sp, $sp, -4
    lw $ra, 0($sp)
    #Cleaning stack after call
    addi $sp, $sp, -4
    #Return jump
    jalr $ra
Object_type_name:
    move $t4 $fp
    #New $fp
    move $fp $sp
    #Reserving space for locals
    addi $sp, $sp, 8
    #Pushing $ra
    sw $ra, 0($sp)
    addi $sp, $sp, 4
    #Saving $fp
    sw $t4, 0($sp)
    addi $sp, $sp, 4
    #Executing instructions
    #Executing Allocate
    li $v0, 9
    li $a0, 12
    syscall
    sw $v0, 0($fp)
    la $t5, String
    sw $t5, 0($v0)
    #Executing Load
    li $v0, 9
    li $a0, 12
    syscall
    sw $v0, 4($fp)
    la $t9, String
    sw $t9, 0($v0)
    li $t9, 6
    sw $t9, 4($v0)
    la $t9, type_name_Object
    sw $t9, 8($v0)
    #Executing Assign
    lw $t4, 4($fp)
    sw $t4, 0($fp)
    #Executing Return
    lw $a1, 0($fp)
    #Restoring saved $fp
    addi $sp, $sp, -4
    lw $fp, 0($sp)
    #Restoring saved $ra
    addi $sp, $sp, -4
    lw $ra, 0($sp)
    #Cleaning stack after call
    addi $sp, $sp, -8
    #Return jump
    jalr $ra
IO_copy:
    move $t3 $fp
    #New $fp
    move $fp $sp
    #Reserving space for locals
    addi $sp, $sp, 4
    #Pushing $ra
    sw $ra, 0($sp)
    addi $sp, $sp, 4
    #Saving $fp
    sw $t3, 0($sp)
    addi $sp, $sp, 4
    #Executing instructions
    #Executing Allocate
    li $v0, 9
    li $a0, 4
    syscall
    sw $v0, 0($fp)
    la $t5, IO
    sw $t5, 0($v0)
    #Executing Return
    lw $a1, 0($fp)
    #Restoring saved $fp
    addi $sp, $sp, -4
    lw $fp, 0($sp)
    #Restoring saved $ra
    addi $sp, $sp, -4
    lw $ra, 0($sp)
    #Cleaning stack after call
    addi $sp, $sp, -4
    #Return jump
    jalr $ra
IO_type_name:
    move $t1 $fp
    #New $fp
    move $fp $sp
    #Reserving space for locals
    addi $sp, $sp, 8
    #Pushing $ra
    sw $ra, 0($sp)
    addi $sp, $sp, 4
    #Saving $fp
    sw $t1, 0($sp)
    addi $sp, $sp, 4
    #Executing instructions
    #Executing Allocate
    li $v0, 9
    li $a0, 12
    syscall
    sw $v0, 0($fp)
    la $t5, String
    sw $t5, 0($v0)
    #Executing Load
    li $v0, 9
    li $a0, 12
    syscall
    sw $v0, 4($fp)
    la $t9, String
    sw $t9, 0($v0)
    li $t9, 2
    sw $t9, 4($v0)
    la $t9, type_name_IO
    sw $t9, 8($v0)
    #Executing Assign
    lw $t5, 4($fp)
    sw $t5, 0($fp)
    #Executing Return
    lw $a1, 0($fp)
    #Restoring saved $fp
    addi $sp, $sp, -4
    lw $fp, 0($sp)
    #Restoring saved $ra
    addi $sp, $sp, -4
    lw $ra, 0($sp)
    #Cleaning stack after call
    addi $sp, $sp, -8
    #Return jump
    jalr $ra
IO_out_string:
    move $t0 $fp
    #New $fp
    move $fp $sp
    #Reserving space for locals
    addi $sp, $sp, 0
    #Pushing $ra
    sw $ra, 0($sp)
    addi $sp, $sp, 4
    #Saving $fp
    sw $t0, 0($sp)
    addi $sp, $sp, 4
    #Executing instructions
    #PrintStringNode
    lw $a0, -4($fp)
    lw $a0, 8($a0)
    li $v0, 4
    syscall
    #Executing Return
    lw $a1, -8($fp)
    #Restoring saved $fp
    addi $sp, $sp, -4
    lw $fp, 0($sp)
    #Restoring saved $ra
    addi $sp, $sp, -4
    lw $ra, 0($sp)
    #Cleaning stack after call
    addi $sp, $sp, 0
    #Return jump
    jalr $ra
IO_out_int:
    move $t5 $fp
    #New $fp
    move $fp $sp
    #Reserving space for locals
    addi $sp, $sp, 0
    #Pushing $ra
    sw $ra, 0($sp)
    addi $sp, $sp, 4
    #Saving $fp
    sw $t5, 0($sp)
    addi $sp, $sp, 4
    #Executing instructions
    #PrintIntNode
    lw $a0, -4($fp)
    li $v0, 1
    syscall
    #Executing Return
    lw $a1, -8($fp)
    #Restoring saved $fp
    addi $sp, $sp, -4
    lw $fp, 0($sp)
    #Restoring saved $ra
    addi $sp, $sp, -4
    lw $ra, 0($sp)
    #Cleaning stack after call
    addi $sp, $sp, 0
    #Return jump
    jalr $ra
IO_in_string:
    move $t0 $fp
    #New $fp
    move $fp $sp
    #Reserving space for locals
    addi $sp, $sp, 4
    #Pushing $ra
    sw $ra, 0($sp)
    addi $sp, $sp, 4
    #Saving $fp
    sw $t0, 0($sp)
    addi $sp, $sp, 4
    #Executing instructions
    #ReadStrNode
    #Reading String to buffer
    la $a0, input_str_buffer
    li $a1, 1024
    li $v0, 8
    syscall
    #Saving reference to read string
    move $t7 $a0
    #Calculating str length
    jal length
    #Allocating char array for new string
    li $v0, 9
    syscall
    move $t6 $v0
    move $t2 $v0
    move $t5 $a0
    #Copying bytes from one char array to another
    jal copy
    #Null-terminating the string
    sb $zero, 0($t6)
    #Allocating new String instance
    li $v0, 9
    li $a0, 12
    syscall
    sw $v0, 0($fp)
    la $t1, String
    sw $t1, 0($v0)
    #Storing length and reference to char array
    sw $t5, 4($v0)
    sw $t2, 8($v0)
    #Executing Return
    lw $a1, 0($fp)
    #Restoring saved $fp
    addi $sp, $sp, -4
    lw $fp, 0($sp)
    #Restoring saved $ra
    addi $sp, $sp, -4
    lw $ra, 0($sp)
    #Cleaning stack after call
    addi $sp, $sp, -4
    #Return jump
    jalr $ra
IO_in_int:
    move $t9 $fp
    #New $fp
    move $fp $sp
    #Reserving space for locals
    addi $sp, $sp, 4
    #Pushing $ra
    sw $ra, 0($sp)
    addi $sp, $sp, 4
    #Saving $fp
    sw $t9, 0($sp)
    addi $sp, $sp, 4
    #Executing instructions
    #ReadIntNode
    li $v0, 5
    syscall
    sw $v0, 0($fp)
    #Executing Return
    lw $a1, 0($fp)
    #Restoring saved $fp
    addi $sp, $sp, -4
    lw $fp, 0($sp)
    #Restoring saved $ra
    addi $sp, $sp, -4
    lw $ra, 0($sp)
    #Cleaning stack after call
    addi $sp, $sp, -4
    #Return jump
    jalr $ra
String_copy:
    move $t9 $fp
    #New $fp
    move $fp $sp
    #Reserving space for locals
    addi $sp, $sp, 4
    #Pushing $ra
    sw $ra, 0($sp)
    addi $sp, $sp, 4
    #Saving $fp
    sw $t9, 0($sp)
    addi $sp, $sp, 4
    #Executing instructions
    #Executing Allocate
    li $v0, 9
    li $a0, 12
    syscall
    sw $v0, 0($fp)
    la $t0, String
    sw $t0, 0($v0)
    #Executing Return
    lw $a1, 0($fp)
    #Restoring saved $fp
    addi $sp, $sp, -4
    lw $fp, 0($sp)
    #Restoring saved $ra
    addi $sp, $sp, -4
    lw $ra, 0($sp)
    #Cleaning stack after call
    addi $sp, $sp, -4
    #Return jump
    jalr $ra
String_type_name:
    move $t2 $fp
    #New $fp
    move $fp $sp
    #Reserving space for locals
    addi $sp, $sp, 8
    #Pushing $ra
    sw $ra, 0($sp)
    addi $sp, $sp, 4
    #Saving $fp
    sw $t2, 0($sp)
    addi $sp, $sp, 4
    #Executing instructions
    #Executing Allocate
    li $v0, 9
    li $a0, 12
    syscall
    sw $v0, 0($fp)
    la $t3, String
    sw $t3, 0($v0)
    #Executing Load
    li $v0, 9
    li $a0, 12
    syscall
    sw $v0, 4($fp)
    la $t2, String
    sw $t2, 0($v0)
    li $t2, 6
    sw $t2, 4($v0)
    la $t2, type_name_String
    sw $t2, 8($v0)
    #Executing Assign
    lw $t2, 4($fp)
    sw $t2, 0($fp)
    #Executing Return
    lw $a1, 0($fp)
    #Restoring saved $fp
    addi $sp, $sp, -4
    lw $fp, 0($sp)
    #Restoring saved $ra
    addi $sp, $sp, -4
    lw $ra, 0($sp)
    #Cleaning stack after call
    addi $sp, $sp, -8
    #Return jump
    jalr $ra
String_length:
    move $t4 $fp
    #New $fp
    move $fp $sp
    #Reserving space for locals
    addi $sp, $sp, 4
    #Pushing $ra
    sw $ra, 0($sp)
    addi $sp, $sp, 4
    #Saving $fp
    sw $t4, 0($sp)
    addi $sp, $sp, 4
    #Executing instructions
    #Executing Length
    lw $t0, -4($fp)
    lw $t0, 4($t0)
    sw $t0, 0($fp)
    #Executing Return
    lw $a1, 0($fp)
    #Restoring saved $fp
    addi $sp, $sp, -4
    lw $fp, 0($sp)
    #Restoring saved $ra
    addi $sp, $sp, -4
    lw $ra, 0($sp)
    #Cleaning stack after call
    addi $sp, $sp, -4
    #Return jump
    jalr $ra
String_concat:
    move $t2 $fp
    #New $fp
    move $fp $sp
    #Reserving space for locals
    addi $sp, $sp, 4
    #Pushing $ra
    sw $ra, 0($sp)
    addi $sp, $sp, 4
    #Saving $fp
    sw $t2, 0($sp)
    addi $sp, $sp, 4
    #Executing instructions
    #Loading length
    lw $s1, -8($fp)
    lw $s1, 4($s1)
    lw $s2, -4($fp)
    lw $s2, 4($s2)
    add $t2, $s1, $s2
    #Allocating new char array
    move $a0 $t2
    addi $a0, $a0, 1
    li $v0, 9
    syscall
    move $t6 $v0
    move $t4 $v0
    #Copying bytes from first string
    lw $t7, -8($fp)
    lw $t7, 8($t7)
    move $a0 $s1
    jal copy
    #Copying bytes from second string
    lw $t7, -4($fp)
    lw $t7, 8($t7)
    move $a0 $s2
    jal copy
    #Null-terminating the string
    sb $zero, 0($t6)
    #Allocating new String instance
    li $v0, 9
    li $a0, 12
    syscall
    sw $v0, 0($fp)
    la $t0, String
    sw $t0, 0($v0)
    #Storing length and reference to char array
    sw $t2, 4($v0)
    sw $t4, 8($v0)
    #Executing Return
    lw $a1, 0($fp)
    #Restoring saved $fp
    addi $sp, $sp, -4
    lw $fp, 0($sp)
    #Restoring saved $ra
    addi $sp, $sp, -4
    lw $ra, 0($sp)
    #Cleaning stack after call
    addi $sp, $sp, -4
    #Return jump
    jalr $ra
String_substr:
    move $t5 $fp
    #New $fp
    move $fp $sp
    #Reserving space for locals
    addi $sp, $sp, 4
    #Pushing $ra
    sw $ra, 0($sp)
    addi $sp, $sp, 4
    #Saving $fp
    sw $t5, 0($sp)
    addi $sp, $sp, 4
    #Executing instructions
    #Executing Substring
    lw $s0, -4($fp)
    move $a0 $s0
    addi $a0, $a0, 1
    li $v0, 9
    syscall
    move $t6 $v0
    #Loading reference to char array of source string
    lw $t7, -12($fp)
    lw $t7, 8($t7)
    lw $s2, -8($fp)
    add $t7, $t7, $s2
    move $s1 $t6
    #Copying bytes from one char array to another
    move $a0 $s0
    jal copy
    #Null-terminating the string
    sb $zero, 0($t6)
    #Allocating new String instance
    li $v0, 9
    li $a0, 12
    syscall
    sw $v0, 0($fp)
    la $t0, String
    sw $t0, 0($v0)
    #Storing length and reference to char array
    lw $s0, -4($fp)
    sw $s0, 4($v0)
    sw $s1, 8($v0)
    #Executing Return
    lw $a1, 0($fp)
    #Restoring saved $fp
    addi $sp, $sp, -4
    lw $fp, 0($sp)
    #Restoring saved $ra
    addi $sp, $sp, -4
    lw $ra, 0($sp)
    #Cleaning stack after call
    addi $sp, $sp, -4
    #Return jump
    jalr $ra
Int_copy:
    move $t4 $fp
    #New $fp
    move $fp $sp
    #Reserving space for locals
    addi $sp, $sp, 4
    #Pushing $ra
    sw $ra, 0($sp)
    addi $sp, $sp, 4
    #Saving $fp
    sw $t4, 0($sp)
    addi $sp, $sp, 4
    #Executing instructions
    #Executing Allocate
    li $v0, 9
    li $a0, 8
    syscall
    sw $v0, 0($fp)
    la $t4, Int
    sw $t4, 0($v0)
    #Executing Return
    lw $a1, 0($fp)
    #Restoring saved $fp
    addi $sp, $sp, -4
    lw $fp, 0($sp)
    #Restoring saved $ra
    addi $sp, $sp, -4
    lw $ra, 0($sp)
    #Cleaning stack after call
    addi $sp, $sp, -4
    #Return jump
    jalr $ra
Int_type_name:
    move $t5 $fp
    #New $fp
    move $fp $sp
    #Reserving space for locals
    addi $sp, $sp, 8
    #Pushing $ra
    sw $ra, 0($sp)
    addi $sp, $sp, 4
    #Saving $fp
    sw $t5, 0($sp)
    addi $sp, $sp, 4
    #Executing instructions
    #Executing Allocate
    li $v0, 9
    li $a0, 12
    syscall
    sw $v0, 0($fp)
    la $t9, String
    sw $t9, 0($v0)
    #Executing Load
    li $v0, 9
    li $a0, 12
    syscall
    sw $v0, 4($fp)
    la $t9, String
    sw $t9, 0($v0)
    li $t9, 3
    sw $t9, 4($v0)
    la $t9, type_name_Int
    sw $t9, 8($v0)
    #Executing Assign
    lw $t4, 4($fp)
    sw $t4, 0($fp)
    #Executing Return
    lw $a1, 0($fp)
    #Restoring saved $fp
    addi $sp, $sp, -4
    lw $fp, 0($sp)
    #Restoring saved $ra
    addi $sp, $sp, -4
    lw $ra, 0($sp)
    #Cleaning stack after call
    addi $sp, $sp, -8
    #Return jump
    jalr $ra
Bool_copy:
    move $t5 $fp
    #New $fp
    move $fp $sp
    #Reserving space for locals
    addi $sp, $sp, 4
    #Pushing $ra
    sw $ra, 0($sp)
    addi $sp, $sp, 4
    #Saving $fp
    sw $t5, 0($sp)
    addi $sp, $sp, 4
    #Executing instructions
    #Executing Allocate
    li $v0, 9
    li $a0, 8
    syscall
    sw $v0, 0($fp)
    la $t2, Bool
    sw $t2, 0($v0)
    #Executing Return
    lw $a1, 0($fp)
    #Restoring saved $fp
    addi $sp, $sp, -4
    lw $fp, 0($sp)
    #Restoring saved $ra
    addi $sp, $sp, -4
    lw $ra, 0($sp)
    #Cleaning stack after call
    addi $sp, $sp, -4
    #Return jump
    jalr $ra
Bool_type_name:
    move $t3 $fp
    #New $fp
    move $fp $sp
    #Reserving space for locals
    addi $sp, $sp, 8
    #Pushing $ra
    sw $ra, 0($sp)
    addi $sp, $sp, 4
    #Saving $fp
    sw $t3, 0($sp)
    addi $sp, $sp, 4
    #Executing instructions
    #Executing Allocate
    li $v0, 9
    li $a0, 12
    syscall
    sw $v0, 0($fp)
    la $t1, String
    sw $t1, 0($v0)
    #Executing Load
    li $v0, 9
    li $a0, 12
    syscall
    sw $v0, 4($fp)
    la $t1, String
    sw $t1, 0($v0)
    li $t1, 4
    sw $t1, 4($v0)
    la $t1, type_name_Bool
    sw $t1, 8($v0)
    #Executing Assign
    lw $t4, 4($fp)
    sw $t4, 0($fp)
    #Executing Return
    lw $a1, 0($fp)
    #Restoring saved $fp
    addi $sp, $sp, -4
    lw $fp, 0($sp)
    #Restoring saved $ra
    addi $sp, $sp, -4
    lw $ra, 0($sp)
    #Cleaning stack after call
    addi $sp, $sp, -8
    #Return jump
    jalr $ra
Object_constructor:
    move $t1 $fp
    #New $fp
    move $fp $sp
    #Reserving space for locals
    addi $sp, $sp, 4
    #Pushing $ra
    sw $ra, 0($sp)
    addi $sp, $sp, 4
    #Saving $fp
    sw $t1, 0($sp)
    addi $sp, $sp, 4
    #Executing instructions
    #Executing Allocate
    li $v0, 9
    li $a0, 4
    syscall
    sw $v0, 0($fp)
    la $t9, Object
    sw $t9, 0($v0)
    #Executing Return
    lw $a1, 0($fp)
    #Restoring saved $fp
    addi $sp, $sp, -4
    lw $fp, 0($sp)
    #Restoring saved $ra
    addi $sp, $sp, -4
    lw $ra, 0($sp)
    #Cleaning stack after call
    addi $sp, $sp, -4
    #Return jump
    jalr $ra
IO_constructor:
    move $t4 $fp
    #New $fp
    move $fp $sp
    #Reserving space for locals
    addi $sp, $sp, 4
    #Pushing $ra
    sw $ra, 0($sp)
    addi $sp, $sp, 4
    #Saving $fp
    sw $t4, 0($sp)
    addi $sp, $sp, 4
    #Executing instructions
    #Executing Allocate
    li $v0, 9
    li $a0, 4
    syscall
    sw $v0, 0($fp)
    la $t2, IO
    sw $t2, 0($v0)
    #Executing Return
    lw $a1, 0($fp)
    #Restoring saved $fp
    addi $sp, $sp, -4
    lw $fp, 0($sp)
    #Restoring saved $ra
    addi $sp, $sp, -4
    lw $ra, 0($sp)
    #Cleaning stack after call
    addi $sp, $sp, -4
    #Return jump
    jalr $ra
Int_constructor:
    move $t1 $fp
    #New $fp
    move $fp $sp
    #Reserving space for locals
    addi $sp, $sp, 4
    #Pushing $ra
    sw $ra, 0($sp)
    addi $sp, $sp, 4
    #Saving $fp
    sw $t1, 0($sp)
    addi $sp, $sp, 4
    #Executing instructions
    #Executing Allocate
    li $v0, 9
    li $a0, 8
    syscall
    sw $v0, 0($fp)
    la $t1, Int
    sw $t1, 0($v0)
    #Executing Return
    lw $a1, 0($fp)
    #Restoring saved $fp
    addi $sp, $sp, -4
    lw $fp, 0($sp)
    #Restoring saved $ra
    addi $sp, $sp, -4
    lw $ra, 0($sp)
    #Cleaning stack after call
    addi $sp, $sp, -4
    #Return jump
    jalr $ra
Bool_constructor:
    move $t2 $fp
    #New $fp
    move $fp $sp
    #Reserving space for locals
    addi $sp, $sp, 4
    #Pushing $ra
    sw $ra, 0($sp)
    addi $sp, $sp, 4
    #Saving $fp
    sw $t2, 0($sp)
    addi $sp, $sp, 4
    #Executing instructions
    #Executing Allocate
    li $v0, 9
    li $a0, 8
    syscall
    sw $v0, 0($fp)
    la $t1, Bool
    sw $t1, 0($v0)
    #Executing Return
    lw $a1, 0($fp)
    #Restoring saved $fp
    addi $sp, $sp, -4
    lw $fp, 0($sp)
    #Restoring saved $ra
    addi $sp, $sp, -4
    lw $ra, 0($sp)
    #Cleaning stack after call
    addi $sp, $sp, -4
    #Return jump
    jalr $ra
String_constructor:
    move $t1 $fp
    #New $fp
    move $fp $sp
    #Reserving space for locals
    addi $sp, $sp, 4
    #Pushing $ra
    sw $ra, 0($sp)
    addi $sp, $sp, 4
    #Saving $fp
    sw $t1, 0($sp)
    addi $sp, $sp, 4
    #Executing instructions
    #Executing Allocate
    li $v0, 9
    li $a0, 12
    syscall
    sw $v0, 0($fp)
    la $t4, String
    sw $t4, 0($v0)
    #Executing Return
    lw $a1, 0($fp)
    #Restoring saved $fp
    addi $sp, $sp, -4
    lw $fp, 0($sp)
    #Restoring saved $ra
    addi $sp, $sp, -4
    lw $ra, 0($sp)
    #Cleaning stack after call
    addi $sp, $sp, -4
    #Return jump
    jalr $ra
Main_copy:
    move $t4 $fp
    #New $fp
    move $fp $sp
    #Reserving space for locals
    addi $sp, $sp, 12
    #Pushing $ra
    sw $ra, 0($sp)
    addi $sp, $sp, 4
    #Saving $fp
    sw $t4, 0($sp)
    addi $sp, $sp, 4
    #Executing instructions
    #Executing Allocate
    li $v0, 9
    li $a0, 12
    syscall
    sw $v0, 0($fp)
    la $t1, Main
    sw $t1, 0($v0)
    #Executing GetAttr
    lw $t3, -4($fp)
    lw $t9, 4($t3)
    sw $t9, 4($fp)
    #Executing SetAttr
    lw $t1, 0($fp)
    lw $t4, 4($fp)
    sw $t4, 4($t1)
    #Executing GetAttr
    lw $t5, -4($fp)
    lw $t3, 8($t5)
    sw $t3, 8($fp)
    #Executing SetAttr
    lw $t2, 0($fp)
    lw $t4, 8($fp)
    sw $t4, 8($t2)
    #Executing Return
    lw $a1, 0($fp)
    #Restoring saved $fp
    addi $sp, $sp, -4
    lw $fp, 0($sp)
    #Restoring saved $ra
    addi $sp, $sp, -4
    lw $ra, 0($sp)
    #Cleaning stack after call
    addi $sp, $sp, -12
    #Return jump
    jalr $ra
Main_type_name:
    move $t5 $fp
    #New $fp
    move $fp $sp
    #Reserving space for locals
    addi $sp, $sp, 8
    #Pushing $ra
    sw $ra, 0($sp)
    addi $sp, $sp, 4
    #Saving $fp
    sw $t5, 0($sp)
    addi $sp, $sp, 4
    #Executing instructions
    #Executing Allocate
    li $v0, 9
    li $a0, 12
    syscall
    sw $v0, 0($fp)
    la $t4, String
    sw $t4, 0($v0)
    #Executing Load
    li $v0, 9
    li $a0, 12
    syscall
    sw $v0, 4($fp)
    la $t9, String
    sw $t9, 0($v0)
    li $t9, 4
    sw $t9, 4($v0)
    la $t9, type_name_Main
    sw $t9, 8($v0)
    #Executing Assign
    lw $t3, 4($fp)
    sw $t3, 0($fp)
    #Executing Return
    lw $a1, 0($fp)
    #Restoring saved $fp
    addi $sp, $sp, -4
    lw $fp, 0($sp)
    #Restoring saved $ra
    addi $sp, $sp, -4
    lw $ra, 0($sp)
    #Cleaning stack after call
    addi $sp, $sp, -8
    #Return jump
    jalr $ra
Main_constructor:
    move $t1 $fp
    #New $fp
    move $fp $sp
    #Reserving space for locals
    addi $sp, $sp, 12
    #Pushing $ra
    sw $ra, 0($sp)
    addi $sp, $sp, 4
    #Saving $fp
    sw $t1, 0($sp)
    addi $sp, $sp, 4
    #Executing instructions
    #Executing Allocate
    li $v0, 9
    li $a0, 12
    syscall
    sw $v0, 0($fp)
    la $t3, Main
    sw $t3, 0($v0)
    #Executing DefaultValue
    li $t9, 0
    sw $t9, 4($fp)
    #Executing SetAttr
    lw $t5, 0($fp)
    lw $t2, 4($fp)
    sw $t2, 4($t5)
    #Executing DefaultValue
    li $t9, 0
    sw $t9, 8($fp)
    #Executing SetAttr
    lw $t2, 0($fp)
    lw $t4, 8($fp)
    sw $t4, 8($t2)
    #Executing Return
    lw $a1, 0($fp)
    #Restoring saved $fp
    addi $sp, $sp, -4
    lw $fp, 0($sp)
    #Restoring saved $ra
    addi $sp, $sp, -4
    lw $ra, 0($sp)
    #Cleaning stack after call
    addi $sp, $sp, -12
    #Return jump
    jalr $ra
Main_main:
    move $t2 $fp
    #New $fp
    move $fp $sp
    #Reserving space for locals
    addi $sp, $sp, 52
    #Pushing $ra
    sw $ra, 0($sp)
    addi $sp, $sp, 4
    #Saving $fp
    sw $t2, 0($sp)
    addi $sp, $sp, 4
    #Executing instructions
    #Executing GetAttr
    lw $t5, -4($fp)
    lw $t4, 4($t5)
    sw $t4, 4($fp)
    #Executing GetAttr
    lw $t1, -4($fp)
    lw $t3, 8($t1)
    sw $t3, 8($fp)
    #Executing Less Operation
    lw $t4, 4($fp)
    lw $t9, 8($fp)
    slt $t3, $t4, $t9
    sw $t3, 0($fp)
    #Executing GetAttr
    lw $t5, -4($fp)
    lw $t1, 4($t5)
    sw $t1, 12($fp)
    #Executing GetAttr
    lw $t4, -4($fp)
    lw $t3, 8($t4)
    sw $t3, 16($fp)
    #Executing Less Equal Operation
    lw $t3, 12($fp)
    lw $t5, 16($fp)
    sle $t4, $t3, $t5
    sw $t4, 0($fp)
    #Executing GetAttr
    lw $t3, -4($fp)
    lw $t5, 4($t3)
    sw $t5, 20($fp)
    #Executing GetAttr
    lw $t5, -4($fp)
    lw $t1, 8($t5)
    sw $t1, 24($fp)
    #Executing Equal Operation
    lw $t9, 20($fp)
    lw $t3, 24($fp)
    seq $t5, $t9, $t3
    sw $t5, 0($fp)
    #Executing Assign
    lw $t1, -4($fp)
    sw $t1, 28($fp)
    #Executing typeof
    lw $t5, 28($fp)
    lw $t5, 0($t5)
    sw $t5, 32($fp)
    #Executing GetAttr
    lw $t5, -4($fp)
    lw $t2, 4($t5)
    sw $t2, 44($fp)
    #Executing GetAttr
    lw $t3, -4($fp)
    lw $t2, 8($t3)
    sw $t2, 48($fp)
    #Executing Less Equal Operation
    lw $t4, 44($fp)
    lw $t1, 48($fp)
    sle $t9, $t4, $t1
    sw $t9, 40($fp)
    lw $t9, 40($fp)
    bnez $t9, THEN_1
    #Executing Load
    li $v0, 9
    li $a0, 12
    syscall
    sw $v0, 36($fp)
    la $t5, String
    sw $t5, 0($v0)
    li $t5, 3
    sw $t5, 4($v0)
    la $t5, string_1
    sw $t5, 8($v0)
    #Executing Goto
    j END_IF_2
    THEN_1:
    #Executing Load
    li $v0, 9
    li $a0, 12
    syscall
    sw $v0, 36($fp)
    la $t5, String
    sw $t5, 0($v0)
    li $t5, 4
    sw $t5, 4($v0)
    la $t5, string_2
    sw $t5, 8($v0)
    END_IF_2:
    #Receiving Arg local_Main_main_internal_7
    lw $t3, 28($fp)
    sw $t3, 0($sp)
    addi $sp, $sp, 4
    #Receiving Arg local_Main_main_internal_9
    lw $t9, 36($fp)
    sw $t9, 0($sp)
    addi $sp, $sp, 4
    #Executing Dynamic Call
    lw $t3, 32($fp)
    lw $t5, 12($t3)
    jalr $t5
    sw $a1, 0($fp)
    addi $sp, $sp, -8
    #Executing Return
    lw $a1, 0($fp)
    #Restoring saved $fp
    addi $sp, $sp, -4
    lw $fp, 0($sp)
    #Restoring saved $ra
    addi $sp, $sp, -4
    lw $ra, 0($sp)
    #Cleaning stack after call
    addi $sp, $sp, -52
    #Return jump
    jalr $ra
